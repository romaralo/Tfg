% Todo en mm. NO CAMBIAMOS LAS COORDENADAS EN NINGÚN MOMENTO, ESE dx^2 NOS DA LA ESCALA.
M=1000; % Number of pixels
L=10; % Length of the field of view (in meters)
lambda=500e-6; % Wavelength of light (in meters)
z=400 %Propagation distance (in meters)
k=2*pi/(lambda); % Wavenumber

A=imread('QWT.png'); %read image file 
A= rgb2gray(A);
A = imresize(A,[M M]);
u1=double(A)

[M,N]=size(u1); %get input field array size 
dx=L/M; %sample interval 

x=-L/2:dx:L/2-dx; %spatial coords 
fx=-1/(2*dx):1/L:1/(2*dx)-1/L; % Spatial frequency vector (in 1/meters)
[X,Y]=meshgrid(x,x); 
[FX,FY]=meshgrid(fx,fx); % Coordinate grids (Fourier space)


h=1/(1j*lambda*z)*exp(1j*k/(2*z)*(X.^2+Y.^2)); %impulse 
H=fft2(fftshift(h))*dx^2; %create trans func 
U1=fft2(fftshift(u1)); %shift, fft src field 
U2=H.*U1; %multiply 
u_fin=ifftshift(ifft2(U2)); %inv fft, center obs field 
%propx=fx*lambda*z

figure(1)
imagesc(x,x,abs(u_fin))
colorbar
colormap('gray')

%% Desde la lente hasta el plano de observación
f=300
%new_coord=lambda*fx*z;
%[x2,y2]=meshgrid(new_coord);
tA=exp(-1j*k*(X.^2+Y.^2)/(2*f));   % METER ALGÚN FACTOR PARA QUE FUNCIONE *1.48
Initial_new_field=u_fin.*tA;
z1=300

%% Coordenadas nuevas. Sólo para calcular fx1 en las nuevas coordenadas.

%L1=2*max(new_coord) % la longitud es el doble porque se refiere a todo lo que ocupa el eje(sumando neg+pos)
%dx1=L1/M; % Length of one pixel
%x1=-L1/2:dx1:L1/2-dx1; % Coordinate vector (in meters)
%fx1=-1/(2*dx1):1/L1:1/(2*dx1)-1/L1;

%% Propagamos otra ves:

%propx1=fx1*lambda*z1; % Coordinate vector in the final plane
h1=1/(1j*lambda*z1)*exp(1j*k/(2*z1)*(X.^2+Y.^2)); %impulse 
H1=fft2(fftshift(h1))*dx^2; %create trans func 
U11=fft2(fftshift(Initial_new_field)); %shift, fft src field 
U21=H1.*U11; %multiply 
u_fin1=ifftshift(ifft2(U21)); %inv fft, center obs field 

%% Dibujamos

figure(2)
imagesc(x,x,abs(u_fin1))
colorbar
colormap('gray')
